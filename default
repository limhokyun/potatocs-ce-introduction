##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {

	listen 80 default_server;
        listen [::]:80 default_server;

    	#listen 80;
    	server_name test-potatocs.com www.test-potatocs.com;
    	return 301 https://test-potatocs.com$request_uri;


	# managed by Certbot



	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	# root /var/www/html;

	# Add index.php to the list if you are using PHP
	# index.html index.htm index.nginx-debian.html;

	# server_name potatocs.com;
	# root /var/www/html/211224_baek/client/dist/client/;
        # Add index.php to the list if you are using PHP
        # index index.html;
	# server_name potatocs.com;

	
	# managed by Certbot

	#location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
	#	return 301 https://potatocs.com$request_uri;
	#}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


server {
    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot

    server_name www.test-potatocs.com;

    ssl_certificate /etc/letsencrypt/live/test-potatocs.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/test-potatocs.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    return 301 https://test-potatocs.com$request_uri;
}

# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}

server {
	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensu a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	#root /var/www/html;
	# root /var/www/html/211224_baek/client/dist/client/;	
	# Add index.php to the list if you are using PHP
	# index index.html index.htm index.nginx-debian.html;
    	# try_files $uri $uri/ /index.html;

	listen [::]:443 ssl; # managed by Certbot
    	listen 443 ssl; # managed by Certbot

	
	server_name test-potatocs.com; # managed by Certbot
	
	# 빌드된 test-potatocs 클라이언트 경로
	location / {
		alias /var/www/html/potatocs/dist/client/;
		index index.html;
		try_files $uri $uri/ /index.html;
	}


	# 빌드된 admin 클라이언트 경로
    location /admin {
        	alias /var/www/html/potatocs/dist/adminClient/;
		index index.html;
        	try_files $uri $uri/ /admin/index.html;
    }

	# 빌드된 nsmarts 클라이언트 경로
    location /nsmarts {
        	alias /var/www/html/potatocs/dist/nsmartsClient/;
		index index.html;
        	try_files $uri $uri/ /nsmarts/index.html;
    }

	# 협업 어플리케이션 restAPI
	location /api {
		proxy_pass http://127.0.0.1:3300;
		proxy_http_version 1.1;
	}

	# 빌드된 실시간 미팅 클라이언트 경로
	location /meeting {
		alias /var/www/html/potatocs-meeting/dist/client/;
		try_files $uri $uri/ /meeting/index.html;
	}

	# 실시간 미팅의 requestAPI
	location /apim {
		proxy_pass http://127.0.0.1:3400;
		proxy_http_version 1.1;

    }

	# 실시간 미팅 소켓통신
	location /socketWebRTC {
        	proxy_pass http://localhost:3400; 
        	proxy_http_version 1.1;
        	proxy_set_header Upgrade $http_upgrade;
        	proxy_set_header Connection 'upgrade';
        	proxy_set_header Host $host;
        	proxy_cache_bypass $http_upgrade;
    }

	# 빌드된 실시간 미팅 테스트 클라이언트 경로
	location /webrtcTest {
		alias /var/www/html/potatocs-meeting-test/dist/webrtc/;
		try_files $uri $uri/ /webrtcTest/index.html;
	}

	# 실시간 미팅 test 소켓통신
	location /socketWebRTCTest {
        	proxy_pass https://localhost:3500; 
        	proxy_http_version 1.1;
        	proxy_set_header Upgrade $http_upgrade;
        	proxy_set_header Connection 'upgrade';
        	proxy_set_header Host $host;
        	proxy_cache_bypass $http_upgrade;
    }


	

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}


    ssl_certificate /etc/letsencrypt/live/test-potatocs.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/test-potatocs.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}

# potatocs.com 입력시 이동
# https://potatocs.com 로 이동
#server {
#    if ($host = test-potatocs.com) {
#        return 301 https://$host$request_uri;
#    } # managed by Certbot


#	listen 80 ;
#	listen [::]:80 ;
#    server_name test-potatocs.com;
#    return 404; # managed by Certbot

#}

# www.potatocs.com 입력시 이동
# https://potatocs.com 로 이동
#server {
#    if ($host = www.test-potatocs.com) {
#        return 301 https://test-potatocs.com$request_uri;
#    } # managed by Certbot
#    server_name www.test-potatocs.com;
#    return 404; # managed by Certbot


#    listen [::]:443 ssl; # managed by Certbot
#    listen 443 ssl; # managed by Certbot
#    ssl_certificate /etc/letsencrypt/live/test-potatocs.com/fullchain.pem; # managed by Certbot
#    ssl_certificate_key /etc/letsencrypt/live/test-potatocs.com/privkey.pem; # managed by Certbot
#    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
#    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

#}


#server {
#    if ($host = www.test-potatocs.com) {
#        return 301 https://test-potatocs.com$request_uri;
#    } # managed by Certbot




#        listen 80 ;
#        listen [::]:80 ;
#    server_name www.test-potatocs.com;
#    return 404; # managed by Certbot
#
#
#}
